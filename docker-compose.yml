version: '3.8'

services:
  auth-db:
    image: postgres:15-alpine
    container_name: auth-db
    environment:
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: auth_password
      POSTGRES_DB: auth_db
    volumes:
      - auth_db_data:/var/lib/postgresql/data
    ports:
      - "54321:5432" # Host port:Container port - for external access if needed, otherwise remove
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth_user -d auth_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  content-db:
    image: postgres:15-alpine
    container_name: content-db
    environment:
      POSTGRES_USER: content_user
      POSTGRES_PASSWORD: content_password
      POSTGRES_DB: content_db
    volumes:
      - content_db_data:/var/lib/postgresql/data
    ports:
      - "54322:5432" # Host port:Container port - for external access if needed, otherwise remove
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U content_user -d content_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - microservices-net

  content-db:
    image: postgres:15-alpine
    container_name: content-db
    environment:
      POSTGRES_USER: content_user
      POSTGRES_PASSWORD: content_password
      POSTGRES_DB: content_db
    volumes:
      - content_db_data:/var/lib/postgresql/data
    ports:
      - "54322:5432" # Host port:Container port - for external access if needed, otherwise remove
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U content_user -d content_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - microservices-net

  auth-service:
    build: ./services/auth-service
    container_name: auth-service
    ports:
      - "8001:8000"
    env_file:
      - ./services/auth-service/.env
    environment:
      # This overrides the DATABASE_URL in the .env file if both are present
      # Ensure .env file has: DATABASE_URL=postgresql://auth_user:auth_password@auth-db:5432/auth_db
      PYTHONUNBUFFERED: 1 # For seeing logs in real time
    volumes:
      - ./services/auth-service:/app # Hot reload
    depends_on:
      auth-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/ || exit 1"] # Assumes auth-service main.py has a root endpoint
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - microservices-net

  content-service:
    build: ./services/content-service
    container_name: content-service
    ports:
      - "8002:8000"
    env_file:
      - ./services/content-service/.env
    environment:
      # Ensure .env file has: DATABASE_URL=postgresql://content_user:content_password@content-db:5432/content_db
      PYTHONUNBUFFERED: 1
    volumes:
      - ./services/content-service:/app # Hot reload
    depends_on:
      content-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/ || exit 1"] # Assumes content-service main.py has a root endpoint
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - microservices-net

  suggestion-service:
    build: ./services/suggestion-service
    container_name: suggestion-service
    ports:
      - "8003:8000"
    env_file:
      - ./services/suggestion-service/.env # Even if empty or minimal
    environment:
      PYTHONUNBUFFERED: 1
    volumes:
      - ./services/suggestion-service:/app # Hot reload
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/ || exit 1"] # Assumes suggestion-service main.py has a root endpoint
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - microservices-net

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:80" # Vite dev server (if exposed) or Nginx served build
    volumes:
      - ./frontend:/app # Mount source code for hot reloading if supported by dev server
      - /app/node_modules # Prevent local node_modules from overwriting container's
    # No explicit healthcheck here, gateway will try to connect.
    # For dev, Vite's HMR is the main concern. For prod build, Nginx in container is robust.
    restart: unless-stopped
    networks:
      - microservices-net

  gateway-service:
    build: ./services/gateway-service
    container_name: gateway-service
    ports:
      - "80:80" # Main entry point for the application
    depends_on:
      - auth-service
      - content-service
      - suggestion-service
      - frontend
    # Healthcheck for Nginx is implicitly its ability to start and serve.
    # If upstream services are down, Nginx will return 502, which is an indicator.
    restart: unless-stopped
    networks:
      - microservices-net

volumes:
  auth_db_data:
  content_db_data:

networks:
  microservices-net:
    driver: bridge
